apply plugin: 'com.android.application'

dependencies {
    compile project(':commons-android')
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    Properties projectNameProperties = new Properties()
    projectNameProperties.load(new FileInputStream(file("project_name.properties")))

    def projectName = projectNameProperties["project.name"];

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(file("version.properties")))

    Properties keysProperties = new Properties()
    keysProperties.load(new FileInputStream(file("../keys.properties")))

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
        versionCode versionProperties['version.code'] as Integer
        versionName versionProperties['version.name']
        setProperty("archivesBaseName", "${projectName}_v${versionName}_r${versionCode}")
        resConfigs "en", "fr"
    }

    signingConfigs {
        release {
            storeFile file(keysProperties['key.store'])
            storePassword keysProperties['key.store.password']
            keyAlias keysProperties['key.alias']
            keyPassword keysProperties['key.alias.password']
        }
    }

    buildTypes {
        //noinspection GroovyMissingReturnStatement
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    def publish = project.tasks.create("copyReleaseApkToOutputDirs")
    publish.description "Copies release APK to output directory"
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            Properties customLocalProperties = new Properties()
            customLocalProperties.load(new FileInputStream(file("../custom_local.properties")))
            def outputDir = customLocalProperties['output.dir']
            def outputCloudDir = customLocalProperties['output.cloud.dir']
            variant.outputs.each { output ->
                if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                    def copyToOutputDirTask = project.tasks.create("copyToOutputDir${variant.name}Apk", Copy)
                    def copyToOutputCloudDirTask = project.tasks.create("copyToOutputCloudDir${variant.name}Apk", Copy)
                    copyToOutputDirTask.from(output.outputFile)
                    copyToOutputCloudDirTask.from(output.outputFile)
                    copyToOutputDirTask.into(outputDir)
                    copyToOutputCloudDirTask.into(outputCloudDir)
                    copyToOutputDirTask.dependsOn variant.assemble
                    copyToOutputCloudDirTask.dependsOn variant.assemble
                    publish.dependsOn copyToOutputDirTask
                    publish.dependsOn copyToOutputCloudDirTask
                }
            }
        }
    }
}
